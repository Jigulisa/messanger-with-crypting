from datetime import UTC, datetime
from queue import Queue
from typing import Self

from dearpygui.dearpygui import (
    add_button,
    add_group,
    add_input_text,
    add_text,
    child_window,
    delete_item,
    get_value,
    get_y_scroll_max,
    set_item_height,
    set_item_pos,
    set_item_width,
    set_value,
    set_y_scroll,
)

from gui.views.core import View
from net.message_struct import PrivateMessage, PrivateMessage
from settings import Settings


class HelpPage(View):
    @property
    def name(self: Self) -> str:
        return "help"


    def create(self: Self) -> None:
        self.header = add_text("HELP PAGE")
        self.header_registration = add_text("Registration")
        self.registration = add_text("""
    1. Пользователь, при желании, вводит логин, с которым он будет заходить в систему
    2. Если пользователь не ввёл логин - он генерируется программой-клиентом (далее - клиент)
    3. Пользователь вводит пароль, с которым он будет заходить в систему
    4. Если пароль содержит менее 8 символов, не содержит строчные, заглавные буквы или цифры, система сообщает, что пароль должен быть от 8 символов и содержать строчные, заглавные буквы и цифры
    5. Если все правильно, клиент генерирует приватный ключ, затем вычисляет по нему публичный
    6. Приватный ключ шифруется и сохраняется в файлике на компьютере, а публичный выводится пользователю на экран
    7. Запускается Сценарий 3 - Первичная персонализация
        """, wrap=500)
        add_text("Never delete the keys, or you will lose the access to your account!", color=(245, 25, 25))
        self.header_logging_in = add_text("Logging In")
        self.logging_in = add_text("""
    1. Пользователь загружает файл, который содержит приватный ключ
    2. Пользователь вводит пароль
    3. Пользователь нажимает кнопку "Войти"
    4. Если введённый пароль не соответсвует правилам, система просит ввести его еще раз
    5. Если загруженный ключ не найден, система сообщает, что файл неверен
    6. Если ключ найден, но пароль не верен, система просит ввести пароль ещё раз
    7. Если всё верно, он входит в свой аккаунт, имея доступ ко всем чатам и с прежними настройками
        """, wrap=500)
        self.header_first_personalisation = add_text("First personalization")
        self.first_personalisation = add_text("""
    1. Пользователю предлагается установить аватарку, которую будут видеть другие пользователи
    2. Пользователю предлагается установить описание, которое будут видеть другие пользователи
    3. Пользователю предлагается установить обои чата (свои или дефолтные), которые будет видеть только он
    4. Пользователю предлагается установить цвет темы мессенджера, это видно только ему
    5. Пользователю предлагается установить цвет сообщений в чатах, это видно только ему
    6. Пользователю предлагается заполнить анкету для знакомств, чтобы ему показывались рекомендации к знакомству
    7. Пользователю предлагается установить один из статусов: "ищу друзей", "ищу не друзей", "никого не ищу"
        """, wrap=500)
        self.header_person_search = add_text("Person search")
        self.person_search = add_text("""
    1. Если у пользователя есть публичный ключ своего знакомого, он ищет его в поиске по ключу
    2. Если пользователь знает ник своего знакомого, он ищет его в поиске по нику
    3. Если пользователь знает почту своего знакомого, он ищет его в поиске по почте
    4. Если пользователь не знает, с кем общаться, в случае, если он уже заполнил анкету, ему показывают рекомендованных к общению пользователей
    5. Если пользователь не заполнил анкету, ему предложат её заполнить, чтобы найти собеседников
    6. Пользователь может использовать фильтры для поиска людей
    7. После выбора собеседника, пользователь переходит в чат с ним
        """, wrap=500)
        self.header_chating = add_text("Chating")
        self.chating = add_text("""
    1. Пользователь имеет список чатов, в которых он состоит
    2. Пользователь может создавать новые чаты и добавлять туда людей
    3. При нажатии на чат, пользователю выводится данная переписка
    4. Пользователь может посмотреть профили людей, состоящих в чате
    5. С помощью строки ввода, пользователь может отправлять сообщения
    6. Если пользователь в групповом чате, он может установить свою роль в этом чате в настройках
    7. Пользователь может сделать рассылку в несколько чатов одновременно
    8. Пользователь может ограничить получение рассылки от других пользователей
        """, wrap=500)
        self.header_spam_tracker = add_text("Spam tracker")
        self.spam_tracker = add_text("""
    1. Пользователь понимает, что в каком то чате периодически встречается спам
    2. Пользователь заходит в настройки чата
    3. Пользователь включает спам трекер
    4. Спам трекер помечает не несущие смысла сообщения
    5. Админ группы может менять режимы спам трекера - он либо удаляет спам сообщения либо скрывает их содержимое (на них можно нажать для просмотра)
    6. В личном чате любой участник может менять режим спам трекера
    7. При выключении спам трекера уже помеченные спамом сообщения остаются помеченными, но новые не сортируются
        """, wrap=500)
        self.header_storage = add_text("Storage")
        self.storage = add_text("""
    1. Пользователь переходит во вкладку Хранилище, где лежат его файлы
    2. Пользователь может загружать свои файлы с сервера
    3. Пользователь может переименовывать файлы
    4. Пользователь может выгружать новые файлы на сервер
    5. Пользователь может удалять свои файлы с сервера
    6. Пользователь может отправлять свои файлы другим людям
    7. Пользователь может посмотреть свойства файлов
        """, wrap=500)
        self.header_self_form = add_text("Self form")
        self.self_form = add_text(""" 
    ! Все пункты в анкете необязательны, но если не заполнен ни один, анкета не создаётся

    1. Пользователь указывает свое ФИО
    2. Пользователь указывает свой пол
    3. Пользователь указывает свой возраст
    4. Пользователь указывает свои интересы из списка на выбор
    5. Пользователь указывает свой любимый жанр музыки
    6. Пользователь указывает свой MBTI тип личности
    7. Пользователь указывает свой любимый тип фильмов (полнометражный, сериал и тд)
    8. Пользователь указывает возраст интересующей его категории людей
    9. Пользователь указывает пол интересующей его категории людей
        """, wrap=500)
        self.if_u_r_super_user = add_text("If you are a super-user")
        self.self_form = add_text("""
    1. Пользователь получает множество сообщений из какого-то чата
    2. Пользователю не хватает времени читать и отвечать на все сообщения в чате
    3. Пользователь заходит в настройки чата
    4. Пользователь нажимает кнопку "Пересказ"
    5. Пользователь вводит количество сообщений, краткое содержание которых он хочет увидеть
    6. Приложение выводит ему краткое содержание указанного количества сообщений.
    7. Пользователь включает функцию "Автоответчик", если он не хочет лишний раз тратить время на данный чат
        """, wrap=500)
        
        self.mail = add_text("If you got a problem that wasn't solved yet, contact us: aalokhmatova@edu.hse.ru\n\n", color=(245, 25, 25))
    def resize(self: Self, width: int, height: int) -> None:
        set_item_width(self.name, width)
        set_item_height(self.name, height)
        # self.logging_in.
        


